[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Grand Ave, Oakland",
    "section": "",
    "text": "1 Grand Ave, Oakland, CA\nOn Feb 3, 2025, Michael Burawoy was killed in the crosswalk by a speeding driver in a hit-and-run. The crosswalk crosses Grande Ave, connecting the Adam’s Point neighborhood to Lake Merritt: the grand jewel of Oakland.\nINSERT image of crosswalk\nINSERT map of Grand Ave along Lake Merrit to show the landscape.\nThe City of Oakland is currently looking re-paving Grand Ave, and the local neighborhoods and street safety groups are hoping that the re-paving will also include upgrades in the pedestrian and bicycle infrastructure so that more neighbors are not lost on this street.\nLet’s look at Grand Ave, from Harrison to Mandana.\nTypes of crashes since 2017\nTypes of crashes over time",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#heatmap-of-telegraph-ave-crashes",
    "href": "index.html#heatmap-of-telegraph-ave-crashes",
    "title": "Grand Ave, Oakland",
    "section": "2.1 Heatmap of Telegraph Ave crashes",
    "text": "2.1 Heatmap of Telegraph Ave crashes\n\n(kind/hiccup\n [:div [:script\n        {:src \"https://cdn.jsdelivr.net/npm/leaflet.heat@0.2.0/dist/leaflet-heat.min.js\"}]\n  ['(fn [latlngs]\n      [:div\n       {:style {:height \"500px\"}\n        :ref   (fn [el]\n                 (let [m (-&gt; js/L\n                             (.map el)\n                             (.setView (clj-&gt;js [37.821925 -122.266376])\n                                       14.3))]\n                   (-&gt; js/L\n                       .-tileLayer\n                       (.provider \"Stadia.AlidadeSmooth\")\n                       (.addTo m))\n                   (doseq [latlng latlngs]\n                     (-&gt; js/L\n                         (.marker (clj-&gt;js latlng))\n                         (.addTo m)))\n                   (-&gt; js/L\n                       (.heatLayer (clj-&gt;js latlngs)\n                                   (clj-&gt;js {:radius 30}))\n                       (.addTo m))))}])\n   telegraph-ave-crash-to-heatmaps]]\n ;; Note we need to mention the dependency:\n {:html/deps [:leaflet]})\n\n\n\n(def telegraph-ave-crashes-with-peds-and-cyclists\n  (-&gt; telegraph-ave-crashes\n      (tc/select-rows (fn [row]\n                        (ped-and-bike-codes (:motor-vehicle-involved-with-code row))))))\n\n\n(def telegraph-ave-injured\n  (let [collision-ids             (-&gt; telegraph-ave-crashes-with-peds-and-cyclists\n                                     (tc/select-columns :collision-id)\n                                     (tc/rows)\n                                     flatten\n                                     set)\n        all-injured-on-telegraph  (-&gt; (load-and-combine-csvs injured-witness-passengers-csv-files)\n                                     (ds/select-columns [:collision-id\n                                                         :injured-wit-pass-id\n                                                         :stated-age\n                                                         :gender\n                                                         :injured-person-type])\n                                     (tc/select-rows (fn [row]\n                                                       (contains? collision-ids (:collision-id row)))))\n        possible-types            (-&gt; all-injured-on-telegraph\n                                     (tc/select-columns :injured-person-type)\n                                     (tc/rows)\n                                     flatten\n                                     set)\n        telegraph-with-crash-data (-&gt; telegraph-ave-crashes-with-peds-and-cyclists\n                                      (tc/select-columns [:collision-id\n                                                          :crash-date-time\n                                                          :motor-vehicle-involved-with-code\n                                                          :motor-vehicle-involved-with-desc\n                                                          :motor-vehicle-involved-with-other-desc\n                                                          :number-injured\n                                                          :number-killed\n                                                          :lighting-description\n                                                          :latitude\n                                                          :longitude\n                                                          :primary-road\n                                                          :secondary-road]))\n        crashes                   (-&gt; all-injured-on-telegraph\n                                     (tc/select-rows (fn [row] (contains? #{\"Pedestrian\" \"Bicyclist\" \"Other\"} (:injured-person-type row))))\n                                     (tc/inner-join telegraph-with-crash-data\n                                                    {:left  :collision-id\n                                                     :right :collision-id}))]\n    (-&gt; crashes\n        (tc/map-columns :intersection-lat\n                        (tc/column-names crashes #{:secondary-road})\n                        (fn [secondary-road]\n                          (let [match (some (fn [[k v]]\n                                              (when (clojure.string/includes? secondary-road k)\n                                                v))\n                                            telegraph-intersections-of-interest)]\n                            (:lat match))))\n        (tc/map-columns :intersection-lng\n                        (tc/column-names crashes #{:secondary-road})\n                        (fn [secondary-road]\n                          (let [match (some (fn [[k v]]\n                                              (when (clojure.string/includes? secondary-road k)\n                                                v))\n                                            telegraph-intersections-of-interest)]\n                            (:lng match)))))))\n\n\n(def telegraph-ave-injuries-to-heatmaps\n  (mapv (fn [{:keys [intersection-lat intersection-lng row-count]}]\n          [intersection-lat intersection-lng (* 2 row-count)])\n        (-&gt; telegraph-ave-injured\n            spy\n            (tc/group-by [:intersection-lat :intersection-lng])\n            (tc/aggregate {:row-count tc/row-count})\n            (tc/rows :as-maps))))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#heatmap-of-telegraph-ave-injuries",
    "href": "index.html#heatmap-of-telegraph-ave-injuries",
    "title": "Grand Ave, Oakland",
    "section": "2.2 Heatmap of Telegraph Ave Injuries",
    "text": "2.2 Heatmap of Telegraph Ave Injuries\n\n(kind/hiccup\n [:div [:script\n        {:src \"https://cdn.jsdelivr.net/npm/leaflet.heat@0.2.0/dist/leaflet-heat.min.js\"}]\n  ['(fn [latlngs]\n      [:div\n       {:style {:height \"500px\"}\n        :ref   (fn [el]\n                 (let [m (-&gt; js/L\n                             (.map el)\n                             (.setView (clj-&gt;js [37.821925 -122.266376])\n                                       14.3))]\n                   (-&gt; js/L\n                       .-tileLayer\n                       (.provider \"Stadia.AlidadeSmooth\")\n                       (.addTo m))\n                   (doseq [latlng latlngs]\n                     (-&gt; js/L\n                         (.marker (clj-&gt;js latlng))\n                         (.addTo m)))\n                   (-&gt; js/L\n                       (.heatLayer (clj-&gt;js latlngs)\n                                   (clj-&gt;js {:radius 30}))\n                       (.addTo m))))}])\n   telegraph-ave-injuries-to-heatmaps]]\n ;; Note we need to mention the dependency:\n {:html/deps [:leaflet]})",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#injuries-in-oakland-over-time-including-telegraph-by-month",
    "href": "index.html#injuries-in-oakland-over-time-including-telegraph-by-month",
    "title": "Grand Ave, Oakland",
    "section": "2.3 Injuries in Oakland, over time (Including Telegraph), by month",
    "text": "2.3 Injuries in Oakland, over time (Including Telegraph), by month\n\n(-&gt; oakland-city-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :month-year (str (.getYear date-time) \"-\" (.getMonthValue date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :month-year\n      :=y :number-injured}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#injuries-on-telegraph-over-time-by-month",
    "href": "index.html#injuries-on-telegraph-over-time-by-month",
    "title": "Grand Ave, Oakland",
    "section": "2.4 Injuries on Telegraph, over time, by month",
    "text": "2.4 Injuries on Telegraph, over time, by month\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :month-year (str (.getYear date-time) \"-\" (.getMonthValue date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :month-year\n      :=y :number-injured}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#injuries-in-oakland-over-time-by-year",
    "href": "index.html#injuries-in-oakland-over-time-by-year",
    "title": "Grand Ave, Oakland",
    "section": "2.5 Injuries in Oakland, over time, by year",
    "text": "2.5 Injuries in Oakland, over time, by year\n\n(-&gt; oakland-city-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by :year)\n    (tc/aggregate {:number-injured-sum #(reduce + (map (fn [v] (if (nil? v) 0 (Integer. v))) (% :number-injured)))})\n    (plotly/layer-bar\n     {:=x :$group-name\n      :=y :number-injured-sum\n      :=layout {:title \"Number of Injuries Over Years\"\n                :xaxis {:title \"Year\"}\n                :yaxis {:title \"Number of Injuries\"}}}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#injuries-on-telegraph-over-time-by-year",
    "href": "index.html#injuries-on-telegraph-over-time-by-year",
    "title": "Grand Ave, Oakland",
    "section": "2.6 Injuries on Telegraph, over time, by year",
    "text": "2.6 Injuries on Telegraph, over time, by year\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by :year)\n    (tc/aggregate {:number-injured-sum #(reduce + (map (fn [v] (if (nil? v) 0 (Integer. v))) (% :number-injured)))})\n    (plotly/layer-bar\n     {:=x :$group-name\n      :=y :number-injured-sum\n      :=layout {:title \"Number of Injuries Over Years\"\n                :xaxis {:title \"Year\"}\n                :yaxis {:title \"Number of Injuries\"}}}))\n\n\nLine chart depicting number of crashes. Oakland is one line and Telegraph is another line\n\n(-&gt; oakland-city-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by [:year])\n    (tc/aggregate {:count tc/row-count})\n    (plotly/layer-line\n     {:=x :year\n      :=y :count\n      :=mark-color \"purple\"}))\n\n\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by [:year])\n    (tc/aggregate {:count tc/row-count})\n    (plotly/layer-line\n     {:=x :year\n      :=y :count\n      :=mark-color \"red\"}))\n\n\ncombined data for both oakland and telegraph for crashes\n\n(let [oakland-data (-&gt; oakland-city-crashes\n                       (ds/row-map (fn [row]\n                                     (let [date-time (:crash-date-time row)]\n                                       (assoc row\n                                              :year (str (.getYear date-time))\n                                              :source \"Oakland\"))))\n                       (tc/dataset)\n                       (tc/group-by [:year :source])\n                       (tc/aggregate {:count tc/row-count})\n                       (tc/add-column :normalized-count (fn [ds]\n                                                          (tcc// (:count ds) (float (first (:count ds)))))))\n      telegraph-data (-&gt; telegraph-ave-crashes\n                         (ds/row-map (fn [row]\n                                       (let [date-time (:crash-date-time row)]\n                                         (assoc row\n                                                :year (str (.getYear date-time))\n                                                :source \"Telegraph\"))))\n                         (tc/dataset)\n                         (tc/group-by [:year :source])\n                         (tc/aggregate {:count tc/row-count})\n                         (tc/add-column :normalized-count (fn [ds]\n                                                            (tcc// (:count ds) (float (first (:count ds)))))))\n      combined-data (tc/concat oakland-data telegraph-data)]\n  (plotly/layer-line\n   combined-data\n   {:=x :year\n    :=y :normalized-count\n    :=color :source\n    :=layout {:title \"Number of Crashes Over Years\"\n              :xaxis {:title \"Year\"}\n              :yaxis {:title \"Number of Crashes\"}}}))\n\n\n\n(def oakland-crashes-pedestrian-involved\n  (-&gt; oakland-city-crashes\n      (tc/select-rows (fn [{:keys [pedestrian-action-desc]}]\n                        (some-&gt; pedestrian-action-desc\n                                (not= \"NO PEDESTRIANS INVOLVED\"))))))\n\n\n(def telegraph-crashes-pedestrian-involved\n  (-&gt; telegraph-ave-crashes\n      (tc/select-rows (fn [{:keys [pedestrian-action-desc]}]\n                        (some-&gt; pedestrian-action-desc\n                                (not= \"NO PEDESTRIANS INVOLVED\"))))))\n\nTODO: Can we compare rates of crashes vs. rates of injuries?j",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#oakland-crashes-with-pedestrians-involved",
    "href": "index.html#oakland-crashes-with-pedestrians-involved",
    "title": "Grand Ave, Oakland",
    "section": "2.7 Oakland Crashes with pedestrians involved",
    "text": "2.7 Oakland Crashes with pedestrians involved\n\n(-&gt; oakland-crashes-pedestrian-involved\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-injured}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#telegraph-crashes-with-pedestrians-involved",
    "href": "index.html#telegraph-crashes-with-pedestrians-involved",
    "title": "Grand Ave, Oakland",
    "section": "2.8 Telegraph Crashes with pedestrians involved",
    "text": "2.8 Telegraph Crashes with pedestrians involved\n\n(-&gt; telegraph-crashes-pedestrian-involved\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-injured}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#killed-in-oakland-over-time-by-year",
    "href": "index.html#killed-in-oakland-over-time-by-year",
    "title": "Grand Ave, Oakland",
    "section": "2.9 Killed in Oakland, over time, by year",
    "text": "2.9 Killed in Oakland, over time, by year\n\n(-&gt; oakland-city-crashes\n    (ds/row-map (fn [row]\n                   (let [date-time (:crash-date-time row)]\n                     (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n       :=y :number-killed}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#killed-on-telegraph-over-time-by-year",
    "href": "index.html#killed-on-telegraph-over-time-by-year",
    "title": "Grand Ave, Oakland",
    "section": "2.10 Killed on Telegraph, over time, by year",
    "text": "2.10 Killed on Telegraph, over time, by year\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-killed}))",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  },
  {
    "objectID": "index.html#what-drivers-are-crashing-into-over-time-on-telegraph",
    "href": "index.html#what-drivers-are-crashing-into-over-time-on-telegraph",
    "title": "Grand Ave, Oakland",
    "section": "2.11 What drivers are crashing into, over time, on Telegraph",
    "text": "2.11 What drivers are crashing into, over time, on Telegraph\nPlotting what drivers are crashing into, over time\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by [:motor-vehicle-involved-with-desc :year ])\n    (tc/aggregate {:count tc/row-count})\n    ((fn [df]\n       (let [years          (distinct (tc/column df :year))\n             other-entities (filter some? (distinct (tc/column df :motor-vehicle-involved-with-desc)))\n             data           (reduce (fn [acc typ]\n                                      (assoc acc (keyword (csk/-&gt;kebab-case typ))\n                                   (map (fn [year]\n                                          (-&gt; df\n                                              (tc/select-rows #(and (= (:year %) year)\n                                                                    (= (:motor-vehicle-involved-with-desc %) typ)))\n                                              (tc/column :count)\n                                              first\n                                              (or 0)))\n                                        years)))\n                                    {:x-axis-data years}\n                          other-entities)]\n         (kind/echarts\n          {:legend {:data (keys (dissoc data :x-axis-data))}\n           :xAxis  {:type \"category\" :data years}\n           :yAxis  {:type \"value\"}\n           :series (map (fn [entity]\n                          {:name entity\n                           :type \"bar\"\n                           :stack \"total\"\n                           :data (get data (keyword (csk/-&gt;kebab-case entity)))})\n                        (keys (dissoc data :x-axis-data)))})))))\n\n\n\n2.11.1 grand vs. Oakland crashes\n\n(let [oakland-data  (-&gt; oakland-city-crashes\n                       (ds/row-map (fn [row]\n                                     (let [date-time (:crash-date-time row)]\n                                       (assoc row\n                                              :year (str (.getYear date-time))\n                                              :source \"Oakland\"))))\n                       (tc/dataset)\n                       (tc/group-by [:year :source])\n                       (tc/aggregate {:count tc/row-count})\n                       (tc/add-column :normalized-count (fn [ds]\n                                                          (tcc// (:count ds) (float (first (:count ds)))))))\n      telegraph-data (-&gt; telegraph-ave-crashes\n                         (ds/row-map (fn [row]\n                                       (let [date-time (:crash-date-time row)]\n                                         (assoc row\n                                                :year (str (.getYear date-time))\n                                                :source \"Telegraph\"))))\n                         (tc/dataset)\n                         (tc/group-by [:year :source])\n                         (tc/aggregate {:count tc/row-count})\n                         (tc/add-column :normalized-count (fn [ds]\n                                                            (tcc// (:count ds) (float (first (:count ds)))))))\n      grand-data    (-&gt; grand-ave-crashes\n                     (ds/row-map (fn [row]\n                                   (let [date-time (:crash-date-time row)]\n                                     (assoc row\n                                            :year (str (.getYear date-time))\n                                            :source \"Grand\"))))\n                     (tc/dataset)\n                     (tc/group-by [:year :source])\n                     (tc/aggregate {:count tc/row-count})\n                     (tc/add-column :normalized-count (fn [ds]\n                                                        (tcc// (:count ds) (float (first (:count ds)))))))\n      combined-data (tc/concat oakland-data grand-data telegraph-data)]\n  (plotly/layer-line\n   combined-data\n   {:=x      :year\n    :=y      :normalized-count\n    :=color  :source\n    :=layout {:title \"Number of Crashes Over Years\"\n              :xaxis {:title \"Year\"}\n              :yaxis {:title \"Number of Crashes\"}}}))\n\n\n\n\n2.11.2 grand vs. Oakland injuries\n\n(let [oakland-data   (-&gt; oakland-city-crashes\n                       (ds/row-map (fn [row]\n                                     (let [date-time (:crash-date-time row)]\n                                       (assoc row\n                                              :year (str (.getYear date-time))\n                                              :source \"Oakland\"))))\n                       (tc/dataset)\n                       (tc/group-by [:year :source])\n                       (tc/aggregate {:number-injured-sum #(reduce + (map (fn [v] (if (nil? v) 0 (Integer. v))) (% :number-injured)))})\n                       (tc/add-column :normalized-count (fn [ds]\n                                                          (tcc// (:number-injured-sum ds) (float (first (:number-injured-sum ds)))))))\n      telegraph-data (-&gt; telegraph-ave-crashes\n                         (ds/row-map (fn [row]\n                                       (let [date-time (:crash-date-time row)]\n                                         (assoc row\n                                                :year (str (.getYear date-time))\n                                                :source \"Telegraph\"))))\n                         (tc/dataset)\n                         (tc/group-by [:year :source])\n                         (tc/aggregate {:number-injured-sum #(reduce + (map (fn [v] (if (nil? v) 0 (Integer. v))) (% :number-injured)))})\n                         (tc/add-column :normalized-count (fn [ds]\n                                                            (tcc// (:number-injured-sum ds) (float (first (:number-injured-sum ds))))))) \n      grand-data     (-&gt; grand-ave-crashes\n                     (ds/row-map (fn [row]\n                                   (let [date-time (:crash-date-time row)]\n                                     (assoc row\n                                            :year (str (.getYear date-time))\n                                            :source \"Grand\"))))\n                     (tc/dataset)\n                     (tc/group-by [:year :source])\n                     (tc/aggregate {:number-injured-sum #(reduce + (map (fn [v] (if (nil? v) 0 (Integer. v))) (% :number-injured)))})\n                     (tc/add-column :normalized-count (fn [ds]\n                                                        (tcc// (:number-injured-sum ds) (float (first (:number-injured-sum ds)))))))\n      combined-data  (tc/concat oakland-data grand-data telegraph-data)]\n  (plotly/layer-line\n   combined-data\n   {:=x      :year\n    :=y      :normalized-count\n    :=color  :source\n    :=layout {:title \"Number of Injuries Over Years\"\n              :xaxis {:title \"Year\"}\n              :yaxis {:title \"Number of Injuries\"}}}))\n\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Grand Ave, Oakland, CA</span>"
    ]
  }
]