[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Grand Ave, Oakland",
    "section": "",
    "text": "java.time.LocalDateTime\n\n\n1 Grand Ave Crash Data\nUsing data from the California Crash Reporting System (CCRS)\n\n(def intersections-of-interest\n  #{\"HARRISON\" \"BAY\" \"PARK VIEW\" \"BELLEVUE\"\n    \"LENOX\" \"LEE\" \"PERKINS\" \"ELLITA\" \"STATEN\"\n    \"EUCLID\" \"EMBARCADERO\" \"MACARTHUR\" \"LAKE PARK\"\n    \"SANTA CLARA\" \"ELWOOD\" \"MANDANA\"})\n\n\n(def csv-files [\"notebooks/datasets/2015crashes.csv\"\n                \"notebooks/datasets/2016crashes.csv\"\n                \"notebooks/datasets/2017crashes.csv\"\n                \"notebooks/datasets/2018crashes.csv\"\n                \"notebooks/datasets/2019crashes.csv\"\n                \"notebooks/datasets/2020crashes.csv\"\n                \"notebooks/datasets/2021crashes.csv\"\n                \"notebooks/datasets/2022crashes.csv\"\n                \"notebooks/datasets/2023crashes.csv\"\n                \"notebooks/datasets/2024crashes.csv\"\n                \"notebooks/datasets/2025crashes.csv\"])\n\n\n(defn load-and-combine-csvs [file-paths]\n  (let [datasets (map #(ds/-&gt;dataset % {:key-fn    csk/-&gt;kebab-case-keyword\n                                        :parser-fn {:collision-id       :integer\n                                                    :crash-date-time    :local-date-time\n                                                    :ncic-code          :integer\n                                                    :is-highway-related :boolean\n                                                    :is-tow-away        :boolean\n                                                    :number-injured     :integer\n                                                    :number-killed      :integer}})\n                      file-paths)]\n    (apply ds/concat datasets)))\n\n\n(def grand-ave-crashes\n  (-&gt; (load-and-combine-csvs csv-files)\n      (ds/select-columns [:collision-id\n                          :ncic-code\n                          :crash-date-time\n                          :collision-type-description\n                          :day-of-week\n                          :is-highway-related\n                          :motor-vehicle-involved-with-desc\n                          :motor-vehicle-involved-with-other-desc\n                          :number-injured\n                          :number-killed\n                          :lighting-description\n                          :latitude\n                          :longitude\n                          :pedestrian-action-desc\n                          :primary-road\n                          :secondary-road])\n      (ds/filter #(clojure.string/includes? (or (:primary-road %)\n                                                (:secondary-road %)) \"GRAND\"))\n      (ds/filter (fn [row]\n                   (or (some #(clojure.string/includes? (:primary-road row) %)\n                             intersections-of-interest)\n                       (some #(clojure.string/includes? (:secondary-road row) %)\n                             intersections-of-interest))))))\n\n\n(-&gt; grand-ave-crashes\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :crash-date-time\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :month-year (str (.getYear date-time) \"-\" (.getMonthValue date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :month-year\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-killed}))\n\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Grand Ave Crash Data</span>"
    ]
  }
]