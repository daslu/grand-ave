[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Grand Ave, Oakland",
    "section": "",
    "text": "java.time.LocalDateTime\n\n\n1 Telegraph Ave Crash Data\nDuring 2020-2022, Telegraph Ave, from 19th St to 41st St was re-worked with pedestrians, bicyclists, and bus-riders in mind. This included reducing the number of lanes for cars, adding bulbouts, bike lanes, and bus loading islands. We we first look at the crash data prior to 2020 and how it changed after the changes were made.\nUsing data from the California Crash Reporting System (CCRS)\n\n(def telegraph-intersections-of-interest\n  #{\"19TH\" \"20TH\" \"21ST\" \"22ND\" \"23RD\" \"24TH\" \"25TH\" \"26TH\"\n    \"27TH\" \"28TH\" \"29TH\" \"30TH\" \"31ST\" \"32ND\" \"33RD\" \"34TH\"\n    \"35TH\" \"36TH\" \"37TH\" \"38TH\" \"39TH\" \"40TH\" \"41ST\"})\n\n\n(def oakland-city-crashes\n  (-&gt; (load-and-combine-csvs crash-csv-files)\n      (ds/select-columns [:collision-id\n                          :ncic-code\n                          :crash-date-time\n                          :collision-type-description\n                          :day-of-week\n                          :is-highway-related\n                          :motor-vehicle-involved-with-desc\n                          :motor-vehicle-involved-with-other-desc\n                          :number-injured\n                          :number-killed\n                          :lighting-description\n                          :latitude\n                          :longitude\n                          :pedestrian-action-desc\n                          :primary-road\n                          :secondary-road])\n      (ds/filter (fn [row]\n                   (or (some #(clojure.string/includes? (:primary-road row) %)\n                             telegraph-intersections-of-interest)\n                       (some #(clojure.string/includes? (:secondary-road row) %)\n                             telegraph-intersections-of-interest))))))\n\n\n(def telegraph-ave-crashes\n  (-&gt; (load-and-combine-csvs crash-csv-files)\n      (ds/select-columns [:collision-id\n                          :ncic-code\n                          :crash-date-time\n                          :collision-type-description\n                          :day-of-week\n                          :is-highway-related\n                          :motor-vehicle-involved-with-desc\n                          :motor-vehicle-involved-with-other-desc\n                          :number-injured\n                          :number-killed\n                          :lighting-description\n                          :latitude\n                          :longitude\n                          :pedestrian-action-desc\n                          :primary-road\n                          :secondary-road])\n      (ds/filter #(clojure.string/includes? (or (:primary-road %)\n                                                (:secondary-road %)) \"TELEGRAPH\"))\n      (ds/filter (fn [row]\n                   (or (some #(clojure.string/includes? (:primary-road row) %)\n                             telegraph-intersections-of-interest)\n                       (some #(clojure.string/includes? (:secondary-road row) %)\n                             telegraph-intersections-of-interest))))))\n\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :month-year (str (.getYear date-time) \"-\" (.getMonthValue date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :month-year\n      :=y :number-injured}))\n\n\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-injured}))\n\n\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-killed}))\n\n\nPlotting what drivers are crashing into, over time\n\n(-&gt; telegraph-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (tc/group-by [:motor-vehicle-involved-with-desc :year ])\n    (tc/aggregate {:count tc/row-count})\n    ((fn [df]\n       (let [years          (distinct (tc/column df :year))\n             other-entities (filter some? (distinct (tc/column df :motor-vehicle-involved-with-desc)))\n             data           (reduce (fn [acc typ]\n                                      (assoc acc (keyword (csk/-&gt;kebab-case typ))\n                                   (map (fn [year]\n                                          (-&gt; df\n                                              (tc/select-rows #(and (= (:year %) year)\n                                                                    (= (:motor-vehicle-involved-with-desc %) typ)))\n                                              (tc/column :count)\n                                              first\n                                              (or 0)))\n                                        years)))\n                                    {:x-axis-data years}\n                          other-entities)]\n         (kind/echarts\n          {:legend {:data (keys (dissoc data :x-axis-data))}\n           :xAxis  {:type \"category\" :data years}\n           :yAxis  {:type \"value\"}\n           :series (map (fn [entity]\n                          {:name entity\n                           :type \"bar\"\n                           :stack \"total\"\n                           :data (get data (keyword (csk/-&gt;kebab-case entity)))})\n                        (keys (dissoc data :x-axis-data)))})))))\n\n\n\n\n2 Grand Ave Crash Data\n\n(def grand-intersections-of-interest\n  #{\"HARRISON\" \"BAY\" \"PARK VIEW\" \"BELLEVUE\"\n    \"LENOX\" \"LEE\" \"PERKINS\" \"ELLITA\" \"STATEN\"\n    \"EUCLID\" \"EMBARCADERO\" \"MACARTHUR\" \"LAKE PARK\"\n    \"SANTA CLARA\" \"ELWOOD\" \"MANDANA\"})\n\n\n(def grand-ave-crashes\n  (-&gt; (load-and-combine-csvs crash-csv-files)\n      (ds/select-columns [:collision-id\n                          :ncic-code\n                          :crash-date-time\n                          :collision-type-description\n                          :day-of-week\n                          :is-highway-related\n                          :motor-vehicle-involved-with-desc\n                          :motor-vehicle-involved-with-other-desc\n                          :number-injured\n                          :number-killed\n                          :lighting-description\n                          :latitude\n                          :longitude\n                          :pedestrian-action-desc\n                          :primary-road\n                          :secondary-road])\n      (ds/filter #(clojure.string/includes? (or (:primary-road %)\n                                                (:secondary-road %)) \"GRAND\"))\n      (ds/filter (fn [row]\n                   (or (some #(clojure.string/includes? (:primary-road row) %)\n                             grand-intersections-of-interest)\n                       (some #(clojure.string/includes? (:secondary-road row) %)\n                             grand-intersections-of-interest))))))\n\n\n(-&gt; grand-ave-crashes\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :crash-date-time\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :month-year (str (.getYear date-time) \"-\" (.getMonthValue date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :month-year\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-injured}))\n\n\n\n(-&gt; grand-ave-crashes\n    (ds/row-map (fn [row]\n                  (let [date-time (:crash-date-time row)]\n                    (assoc row\n                           :year (str (.getYear date-time))))))\n    (tc/dataset)\n    (plotly/layer-bar\n     {:=x :year\n      :=y :number-killed}))\n\n\n\nsource: notebooks/index.clj",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>Telegraph Ave Crash Data</span>"
    ]
  }
]